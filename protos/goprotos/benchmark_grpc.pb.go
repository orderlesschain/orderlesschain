// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BenchmarkServiceClient is the client API for BenchmarkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BenchmarkServiceClient interface {
	ExecuteBenchmark(ctx context.Context, in *BenchmarkConfig, opts ...grpc.CallOption) (*Empty, error)
	FaultyNodesNotify(ctx context.Context, in *FaultyNodes, opts ...grpc.CallOption) (*Empty, error)
	ExecutionStatus(ctx context.Context, in *ExperimentBase, opts ...grpc.CallOption) (*ExperimentResult, error)
	GetExperimentResult(ctx context.Context, in *ExperimentBase, opts ...grpc.CallOption) (BenchmarkService_GetExperimentResultClient, error)
	ChangeModeRestart(ctx context.Context, in *OperationMode, opts ...grpc.CallOption) (*Empty, error)
	StopAndGetProfilingResult(ctx context.Context, in *Profiling, opts ...grpc.CallOption) (BenchmarkService_StopAndGetProfilingResultClient, error)
	FailureCommand(ctx context.Context, in *FailureCommandMode, opts ...grpc.CallOption) (*Empty, error)
}

type benchmarkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBenchmarkServiceClient(cc grpc.ClientConnInterface) BenchmarkServiceClient {
	return &benchmarkServiceClient{cc}
}

func (c *benchmarkServiceClient) ExecuteBenchmark(ctx context.Context, in *BenchmarkConfig, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protos.BenchmarkService/ExecuteBenchmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benchmarkServiceClient) FaultyNodesNotify(ctx context.Context, in *FaultyNodes, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protos.BenchmarkService/FaultyNodesNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benchmarkServiceClient) ExecutionStatus(ctx context.Context, in *ExperimentBase, opts ...grpc.CallOption) (*ExperimentResult, error) {
	out := new(ExperimentResult)
	err := c.cc.Invoke(ctx, "/protos.BenchmarkService/ExecutionStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benchmarkServiceClient) GetExperimentResult(ctx context.Context, in *ExperimentBase, opts ...grpc.CallOption) (BenchmarkService_GetExperimentResultClient, error) {
	stream, err := c.cc.NewStream(ctx, &BenchmarkService_ServiceDesc.Streams[0], "/protos.BenchmarkService/GetExperimentResult", opts...)
	if err != nil {
		return nil, err
	}
	x := &benchmarkServiceGetExperimentResultClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BenchmarkService_GetExperimentResultClient interface {
	Recv() (*ReportFile, error)
	grpc.ClientStream
}

type benchmarkServiceGetExperimentResultClient struct {
	grpc.ClientStream
}

func (x *benchmarkServiceGetExperimentResultClient) Recv() (*ReportFile, error) {
	m := new(ReportFile)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *benchmarkServiceClient) ChangeModeRestart(ctx context.Context, in *OperationMode, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protos.BenchmarkService/ChangeModeRestart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benchmarkServiceClient) StopAndGetProfilingResult(ctx context.Context, in *Profiling, opts ...grpc.CallOption) (BenchmarkService_StopAndGetProfilingResultClient, error) {
	stream, err := c.cc.NewStream(ctx, &BenchmarkService_ServiceDesc.Streams[1], "/protos.BenchmarkService/StopAndGetProfilingResult", opts...)
	if err != nil {
		return nil, err
	}
	x := &benchmarkServiceStopAndGetProfilingResultClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BenchmarkService_StopAndGetProfilingResultClient interface {
	Recv() (*ProfilingResult, error)
	grpc.ClientStream
}

type benchmarkServiceStopAndGetProfilingResultClient struct {
	grpc.ClientStream
}

func (x *benchmarkServiceStopAndGetProfilingResultClient) Recv() (*ProfilingResult, error) {
	m := new(ProfilingResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *benchmarkServiceClient) FailureCommand(ctx context.Context, in *FailureCommandMode, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protos.BenchmarkService/FailureCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BenchmarkServiceServer is the server API for BenchmarkService service.
// All implementations should embed UnimplementedBenchmarkServiceServer
// for forward compatibility
type BenchmarkServiceServer interface {
	ExecuteBenchmark(context.Context, *BenchmarkConfig) (*Empty, error)
	FaultyNodesNotify(context.Context, *FaultyNodes) (*Empty, error)
	ExecutionStatus(context.Context, *ExperimentBase) (*ExperimentResult, error)
	GetExperimentResult(*ExperimentBase, BenchmarkService_GetExperimentResultServer) error
	ChangeModeRestart(context.Context, *OperationMode) (*Empty, error)
	StopAndGetProfilingResult(*Profiling, BenchmarkService_StopAndGetProfilingResultServer) error
	FailureCommand(context.Context, *FailureCommandMode) (*Empty, error)
}

// UnimplementedBenchmarkServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBenchmarkServiceServer struct {
}

func (UnimplementedBenchmarkServiceServer) ExecuteBenchmark(context.Context, *BenchmarkConfig) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteBenchmark not implemented")
}
func (UnimplementedBenchmarkServiceServer) FaultyNodesNotify(context.Context, *FaultyNodes) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FaultyNodesNotify not implemented")
}
func (UnimplementedBenchmarkServiceServer) ExecutionStatus(context.Context, *ExperimentBase) (*ExperimentResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecutionStatus not implemented")
}
func (UnimplementedBenchmarkServiceServer) GetExperimentResult(*ExperimentBase, BenchmarkService_GetExperimentResultServer) error {
	return status.Errorf(codes.Unimplemented, "method GetExperimentResult not implemented")
}
func (UnimplementedBenchmarkServiceServer) ChangeModeRestart(context.Context, *OperationMode) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeModeRestart not implemented")
}
func (UnimplementedBenchmarkServiceServer) StopAndGetProfilingResult(*Profiling, BenchmarkService_StopAndGetProfilingResultServer) error {
	return status.Errorf(codes.Unimplemented, "method StopAndGetProfilingResult not implemented")
}
func (UnimplementedBenchmarkServiceServer) FailureCommand(context.Context, *FailureCommandMode) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FailureCommand not implemented")
}

// UnsafeBenchmarkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BenchmarkServiceServer will
// result in compilation errors.
type UnsafeBenchmarkServiceServer interface {
	mustEmbedUnimplementedBenchmarkServiceServer()
}

func RegisterBenchmarkServiceServer(s grpc.ServiceRegistrar, srv BenchmarkServiceServer) {
	s.RegisterService(&BenchmarkService_ServiceDesc, srv)
}

func _BenchmarkService_ExecuteBenchmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BenchmarkConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkServiceServer).ExecuteBenchmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.BenchmarkService/ExecuteBenchmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkServiceServer).ExecuteBenchmark(ctx, req.(*BenchmarkConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _BenchmarkService_FaultyNodesNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FaultyNodes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkServiceServer).FaultyNodesNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.BenchmarkService/FaultyNodesNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkServiceServer).FaultyNodesNotify(ctx, req.(*FaultyNodes))
	}
	return interceptor(ctx, in, info, handler)
}

func _BenchmarkService_ExecutionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExperimentBase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkServiceServer).ExecutionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.BenchmarkService/ExecutionStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkServiceServer).ExecutionStatus(ctx, req.(*ExperimentBase))
	}
	return interceptor(ctx, in, info, handler)
}

func _BenchmarkService_GetExperimentResult_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExperimentBase)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BenchmarkServiceServer).GetExperimentResult(m, &benchmarkServiceGetExperimentResultServer{stream})
}

type BenchmarkService_GetExperimentResultServer interface {
	Send(*ReportFile) error
	grpc.ServerStream
}

type benchmarkServiceGetExperimentResultServer struct {
	grpc.ServerStream
}

func (x *benchmarkServiceGetExperimentResultServer) Send(m *ReportFile) error {
	return x.ServerStream.SendMsg(m)
}

func _BenchmarkService_ChangeModeRestart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperationMode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkServiceServer).ChangeModeRestart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.BenchmarkService/ChangeModeRestart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkServiceServer).ChangeModeRestart(ctx, req.(*OperationMode))
	}
	return interceptor(ctx, in, info, handler)
}

func _BenchmarkService_StopAndGetProfilingResult_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Profiling)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BenchmarkServiceServer).StopAndGetProfilingResult(m, &benchmarkServiceStopAndGetProfilingResultServer{stream})
}

type BenchmarkService_StopAndGetProfilingResultServer interface {
	Send(*ProfilingResult) error
	grpc.ServerStream
}

type benchmarkServiceStopAndGetProfilingResultServer struct {
	grpc.ServerStream
}

func (x *benchmarkServiceStopAndGetProfilingResultServer) Send(m *ProfilingResult) error {
	return x.ServerStream.SendMsg(m)
}

func _BenchmarkService_FailureCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FailureCommandMode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkServiceServer).FailureCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.BenchmarkService/FailureCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkServiceServer).FailureCommand(ctx, req.(*FailureCommandMode))
	}
	return interceptor(ctx, in, info, handler)
}

// BenchmarkService_ServiceDesc is the grpc.ServiceDesc for BenchmarkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BenchmarkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.BenchmarkService",
	HandlerType: (*BenchmarkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteBenchmark",
			Handler:    _BenchmarkService_ExecuteBenchmark_Handler,
		},
		{
			MethodName: "FaultyNodesNotify",
			Handler:    _BenchmarkService_FaultyNodesNotify_Handler,
		},
		{
			MethodName: "ExecutionStatus",
			Handler:    _BenchmarkService_ExecutionStatus_Handler,
		},
		{
			MethodName: "ChangeModeRestart",
			Handler:    _BenchmarkService_ChangeModeRestart_Handler,
		},
		{
			MethodName: "FailureCommand",
			Handler:    _BenchmarkService_FailureCommand_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetExperimentResult",
			Handler:       _BenchmarkService_GetExperimentResult_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StopAndGetProfilingResult",
			Handler:       _BenchmarkService_StopAndGetProfilingResult_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "benchmark.proto",
}
