// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SequencerServiceClient is the client API for SequencerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SequencerServiceClient interface {
	//  rpc BIDLTransactions (stream protos.ProposalRequestBidl) returns (Empty);
	//  rpc SubscribeTransactionsForOrdering (SequencedTransactionForOrdering) returns (stream ProposalRequestBidl);
	//  rpc SubscribeTransactionsForProcessing (SequencedTransactionForCommitting) returns (stream ProposalRequestBidl);
	BIDLTransactions(ctx context.Context, opts ...grpc.CallOption) (SequencerService_BIDLTransactionsClient, error)
	SubscribeTransactionsForOrdering(ctx context.Context, in *SequencedTransactionForOrdering, opts ...grpc.CallOption) (SequencerService_SubscribeTransactionsForOrderingClient, error)
	SubscribeTransactionsForProcessing(ctx context.Context, in *SequencedTransactionForCommitting, opts ...grpc.CallOption) (SequencerService_SubscribeTransactionsForProcessingClient, error)
	ChangeModeRestart(ctx context.Context, in *OperationMode, opts ...grpc.CallOption) (*Empty, error)
	GetTransactionProfilingResult(ctx context.Context, in *Empty, opts ...grpc.CallOption) (SequencerService_GetTransactionProfilingResultClient, error)
	GetCPUMemoryProfilingResult(ctx context.Context, in *Empty, opts ...grpc.CallOption) (SequencerService_GetCPUMemoryProfilingResultClient, error)
}

type sequencerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSequencerServiceClient(cc grpc.ClientConnInterface) SequencerServiceClient {
	return &sequencerServiceClient{cc}
}

func (c *sequencerServiceClient) BIDLTransactions(ctx context.Context, opts ...grpc.CallOption) (SequencerService_BIDLTransactionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &SequencerService_ServiceDesc.Streams[0], "/protos.SequencerService/BIDLTransactions", opts...)
	if err != nil {
		return nil, err
	}
	x := &sequencerServiceBIDLTransactionsClient{stream}
	return x, nil
}

type SequencerService_BIDLTransactionsClient interface {
	Send(*ProposalRequest) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type sequencerServiceBIDLTransactionsClient struct {
	grpc.ClientStream
}

func (x *sequencerServiceBIDLTransactionsClient) Send(m *ProposalRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sequencerServiceBIDLTransactionsClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sequencerServiceClient) SubscribeTransactionsForOrdering(ctx context.Context, in *SequencedTransactionForOrdering, opts ...grpc.CallOption) (SequencerService_SubscribeTransactionsForOrderingClient, error) {
	stream, err := c.cc.NewStream(ctx, &SequencerService_ServiceDesc.Streams[1], "/protos.SequencerService/SubscribeTransactionsForOrdering", opts...)
	if err != nil {
		return nil, err
	}
	x := &sequencerServiceSubscribeTransactionsForOrderingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SequencerService_SubscribeTransactionsForOrderingClient interface {
	Recv() (*ProposalRequest, error)
	grpc.ClientStream
}

type sequencerServiceSubscribeTransactionsForOrderingClient struct {
	grpc.ClientStream
}

func (x *sequencerServiceSubscribeTransactionsForOrderingClient) Recv() (*ProposalRequest, error) {
	m := new(ProposalRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sequencerServiceClient) SubscribeTransactionsForProcessing(ctx context.Context, in *SequencedTransactionForCommitting, opts ...grpc.CallOption) (SequencerService_SubscribeTransactionsForProcessingClient, error) {
	stream, err := c.cc.NewStream(ctx, &SequencerService_ServiceDesc.Streams[2], "/protos.SequencerService/SubscribeTransactionsForProcessing", opts...)
	if err != nil {
		return nil, err
	}
	x := &sequencerServiceSubscribeTransactionsForProcessingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SequencerService_SubscribeTransactionsForProcessingClient interface {
	Recv() (*ProposalRequest, error)
	grpc.ClientStream
}

type sequencerServiceSubscribeTransactionsForProcessingClient struct {
	grpc.ClientStream
}

func (x *sequencerServiceSubscribeTransactionsForProcessingClient) Recv() (*ProposalRequest, error) {
	m := new(ProposalRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sequencerServiceClient) ChangeModeRestart(ctx context.Context, in *OperationMode, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protos.SequencerService/ChangeModeRestart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequencerServiceClient) GetTransactionProfilingResult(ctx context.Context, in *Empty, opts ...grpc.CallOption) (SequencerService_GetTransactionProfilingResultClient, error) {
	stream, err := c.cc.NewStream(ctx, &SequencerService_ServiceDesc.Streams[3], "/protos.SequencerService/GetTransactionProfilingResult", opts...)
	if err != nil {
		return nil, err
	}
	x := &sequencerServiceGetTransactionProfilingResultClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SequencerService_GetTransactionProfilingResultClient interface {
	Recv() (*LatencyBreakDown, error)
	grpc.ClientStream
}

type sequencerServiceGetTransactionProfilingResultClient struct {
	grpc.ClientStream
}

func (x *sequencerServiceGetTransactionProfilingResultClient) Recv() (*LatencyBreakDown, error) {
	m := new(LatencyBreakDown)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sequencerServiceClient) GetCPUMemoryProfilingResult(ctx context.Context, in *Empty, opts ...grpc.CallOption) (SequencerService_GetCPUMemoryProfilingResultClient, error) {
	stream, err := c.cc.NewStream(ctx, &SequencerService_ServiceDesc.Streams[4], "/protos.SequencerService/GetCPUMemoryProfilingResult", opts...)
	if err != nil {
		return nil, err
	}
	x := &sequencerServiceGetCPUMemoryProfilingResultClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SequencerService_GetCPUMemoryProfilingResultClient interface {
	Recv() (*MemoryCPUProfile, error)
	grpc.ClientStream
}

type sequencerServiceGetCPUMemoryProfilingResultClient struct {
	grpc.ClientStream
}

func (x *sequencerServiceGetCPUMemoryProfilingResultClient) Recv() (*MemoryCPUProfile, error) {
	m := new(MemoryCPUProfile)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SequencerServiceServer is the server API for SequencerService service.
// All implementations should embed UnimplementedSequencerServiceServer
// for forward compatibility
type SequencerServiceServer interface {
	//  rpc BIDLTransactions (stream protos.ProposalRequestBidl) returns (Empty);
	//  rpc SubscribeTransactionsForOrdering (SequencedTransactionForOrdering) returns (stream ProposalRequestBidl);
	//  rpc SubscribeTransactionsForProcessing (SequencedTransactionForCommitting) returns (stream ProposalRequestBidl);
	BIDLTransactions(SequencerService_BIDLTransactionsServer) error
	SubscribeTransactionsForOrdering(*SequencedTransactionForOrdering, SequencerService_SubscribeTransactionsForOrderingServer) error
	SubscribeTransactionsForProcessing(*SequencedTransactionForCommitting, SequencerService_SubscribeTransactionsForProcessingServer) error
	ChangeModeRestart(context.Context, *OperationMode) (*Empty, error)
	GetTransactionProfilingResult(*Empty, SequencerService_GetTransactionProfilingResultServer) error
	GetCPUMemoryProfilingResult(*Empty, SequencerService_GetCPUMemoryProfilingResultServer) error
}

// UnimplementedSequencerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSequencerServiceServer struct {
}

func (UnimplementedSequencerServiceServer) BIDLTransactions(SequencerService_BIDLTransactionsServer) error {
	return status.Errorf(codes.Unimplemented, "method BIDLTransactions not implemented")
}
func (UnimplementedSequencerServiceServer) SubscribeTransactionsForOrdering(*SequencedTransactionForOrdering, SequencerService_SubscribeTransactionsForOrderingServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeTransactionsForOrdering not implemented")
}
func (UnimplementedSequencerServiceServer) SubscribeTransactionsForProcessing(*SequencedTransactionForCommitting, SequencerService_SubscribeTransactionsForProcessingServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeTransactionsForProcessing not implemented")
}
func (UnimplementedSequencerServiceServer) ChangeModeRestart(context.Context, *OperationMode) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeModeRestart not implemented")
}
func (UnimplementedSequencerServiceServer) GetTransactionProfilingResult(*Empty, SequencerService_GetTransactionProfilingResultServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTransactionProfilingResult not implemented")
}
func (UnimplementedSequencerServiceServer) GetCPUMemoryProfilingResult(*Empty, SequencerService_GetCPUMemoryProfilingResultServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCPUMemoryProfilingResult not implemented")
}

// UnsafeSequencerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SequencerServiceServer will
// result in compilation errors.
type UnsafeSequencerServiceServer interface {
	mustEmbedUnimplementedSequencerServiceServer()
}

func RegisterSequencerServiceServer(s grpc.ServiceRegistrar, srv SequencerServiceServer) {
	s.RegisterService(&SequencerService_ServiceDesc, srv)
}

func _SequencerService_BIDLTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SequencerServiceServer).BIDLTransactions(&sequencerServiceBIDLTransactionsServer{stream})
}

type SequencerService_BIDLTransactionsServer interface {
	SendAndClose(*Empty) error
	Recv() (*ProposalRequest, error)
	grpc.ServerStream
}

type sequencerServiceBIDLTransactionsServer struct {
	grpc.ServerStream
}

func (x *sequencerServiceBIDLTransactionsServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sequencerServiceBIDLTransactionsServer) Recv() (*ProposalRequest, error) {
	m := new(ProposalRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SequencerService_SubscribeTransactionsForOrdering_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SequencedTransactionForOrdering)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SequencerServiceServer).SubscribeTransactionsForOrdering(m, &sequencerServiceSubscribeTransactionsForOrderingServer{stream})
}

type SequencerService_SubscribeTransactionsForOrderingServer interface {
	Send(*ProposalRequest) error
	grpc.ServerStream
}

type sequencerServiceSubscribeTransactionsForOrderingServer struct {
	grpc.ServerStream
}

func (x *sequencerServiceSubscribeTransactionsForOrderingServer) Send(m *ProposalRequest) error {
	return x.ServerStream.SendMsg(m)
}

func _SequencerService_SubscribeTransactionsForProcessing_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SequencedTransactionForCommitting)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SequencerServiceServer).SubscribeTransactionsForProcessing(m, &sequencerServiceSubscribeTransactionsForProcessingServer{stream})
}

type SequencerService_SubscribeTransactionsForProcessingServer interface {
	Send(*ProposalRequest) error
	grpc.ServerStream
}

type sequencerServiceSubscribeTransactionsForProcessingServer struct {
	grpc.ServerStream
}

func (x *sequencerServiceSubscribeTransactionsForProcessingServer) Send(m *ProposalRequest) error {
	return x.ServerStream.SendMsg(m)
}

func _SequencerService_ChangeModeRestart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperationMode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequencerServiceServer).ChangeModeRestart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.SequencerService/ChangeModeRestart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequencerServiceServer).ChangeModeRestart(ctx, req.(*OperationMode))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequencerService_GetTransactionProfilingResult_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SequencerServiceServer).GetTransactionProfilingResult(m, &sequencerServiceGetTransactionProfilingResultServer{stream})
}

type SequencerService_GetTransactionProfilingResultServer interface {
	Send(*LatencyBreakDown) error
	grpc.ServerStream
}

type sequencerServiceGetTransactionProfilingResultServer struct {
	grpc.ServerStream
}

func (x *sequencerServiceGetTransactionProfilingResultServer) Send(m *LatencyBreakDown) error {
	return x.ServerStream.SendMsg(m)
}

func _SequencerService_GetCPUMemoryProfilingResult_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SequencerServiceServer).GetCPUMemoryProfilingResult(m, &sequencerServiceGetCPUMemoryProfilingResultServer{stream})
}

type SequencerService_GetCPUMemoryProfilingResultServer interface {
	Send(*MemoryCPUProfile) error
	grpc.ServerStream
}

type sequencerServiceGetCPUMemoryProfilingResultServer struct {
	grpc.ServerStream
}

func (x *sequencerServiceGetCPUMemoryProfilingResultServer) Send(m *MemoryCPUProfile) error {
	return x.ServerStream.SendMsg(m)
}

// SequencerService_ServiceDesc is the grpc.ServiceDesc for SequencerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SequencerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.SequencerService",
	HandlerType: (*SequencerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChangeModeRestart",
			Handler:    _SequencerService_ChangeModeRestart_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BIDLTransactions",
			Handler:       _SequencerService_BIDLTransactions_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SubscribeTransactionsForOrdering",
			Handler:       _SequencerService_SubscribeTransactionsForOrdering_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeTransactionsForProcessing",
			Handler:       _SequencerService_SubscribeTransactionsForProcessing_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTransactionProfilingResult",
			Handler:       _SequencerService_GetTransactionProfilingResult_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetCPUMemoryProfilingResult",
			Handler:       _SequencerService_GetCPUMemoryProfilingResult_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sequencer.proto",
}
