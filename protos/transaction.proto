syntax = "proto3";

package protos;
option go_package = "./;protos";

import "shared.proto";

message Block {
  string block_id = 1;
  bytes previous_block_hash = 3;
  bytes this_block_hash = 4;
  bytes transactions_digest = 7;
  repeated Transaction transactions = 5;
  int32 block_sequence = 6;
  bytes block_signature_synchotstuff = 8;
  string signer_node_synchotstuff = 9;
  int32 quorumSyncHotStuff = 10;
}

message ProposalRequest {
  string proposal_id = 1;
  string client_id = 2;
  string contract_name = 3;
  string method_name = 4;
  repeated string method_params = 5;
  TargetSystem target_system = 6;
  enum WriteReadTransaction {
    None = 0;
    Write = 1;
    Read = 2;
  }
  WriteReadTransaction write_read_transaction = 9;
  int32 transaction_sequence = 10;
  bytes client_signature = 11;
}

message ProposalResponse {
  string proposal_id = 1;
  enum ProposalStatus {
    SUCCESS = 0;
    FAIL = 1;
  }
  ProposalStatus status = 2;
  string node_id = 3;
  ProposalResponseReadWriteSet read_write_set = 4;
  bytes node_signature = 5;
  bytes shim_output = 6;
}

message ProposalResponseReadKeys {
  repeated ReadKey read_keys = 1;
}

message ProposalResponseWriteKeyValues {
  repeated WriteKeyValue write_key_values = 1;
}

message ProposalResponseReadWriteSet {
  ProposalResponseReadKeys read_keys = 1;
  ProposalResponseWriteKeyValues write_key_values = 2;
}

message ReadKey {
  string key = 1;
  int32 version_number = 2;
}

message WriteKeyValue {
  string key = 1;
  bytes value = 2;
  enum WriteType {
    NOTYPEWRITE = 0;
    BINARY = 1;
    CRDTOPERATIONSLIST_WARM = 2;
    FABRICCRDT = 3;
    CRDTOPERATIONSLIST_COLD = 4;
  }
  WriteType write_type = 3;
}

message WriteValue {
  bytes value = 1;
  int32 version_number = 2;
}

enum TransactionStatus {
  NOTYPETRANSACTION = 0;
  RUNNING = 1;
  SUCCEEDED = 2;
  FAILED_GENERAL = 3;
  FAILED_MVCC = 4;
  FAILED_SIGNATURE_VALIDATION = 5;
  FAILED_PROPOSAL = 6;
  FAILED_DATABASE = 7;
  FAILED_TIMEOUT = 8;
}

message Transaction {
  string transaction_id = 1;
  string client_id = 2;
  ProposalResponseReadWriteSet read_write_set = 3;
  map<string, bytes> node_signatures = 4;
  string contract_name = 5;
  TargetSystem target_system = 6;
  TransactionStatus status = 7;
  bool from_node = 8;
  bytes client_signature = 9;
  int32 endorsement_policy = 10;
  int32 transaction_sequence = 11;
  ProposalRequest proposal_request = 12;
  bytes proposal_request_hash = 13;
}

message TransactionResponse {
  string transaction_id = 1;
  TransactionStatus status = 2;
  string node_id = 3;
  bytes node_signature = 4;
  bytes block_header = 5;
}

message ProposalResponseEventSubscription {
  string component_id = 1;
}

message TransactionResponseEventSubscription {
  string component_id = 1;
  string public_key = 2;
}

message NodeTransactionResponse {
  repeated Transaction transaction = 1;
}

message PublicKeyResponse {
  string public_key = 1;
  string node_id = 2;
}

service TransactionService {
  rpc GetPublicKey (Empty) returns (PublicKeyResponse);
  rpc ChangeModeRestart (OperationMode) returns (Empty);
  rpc FailureCommand (FailureCommandMode) returns (Empty);

  rpc StopAndGetProfilingResult (Profiling) returns (stream ProfilingResult);

  rpc ProcessProposalOrderlessChainStream (stream ProposalRequest) returns (Empty);
  rpc CommitOrderlessChainTransactionStream (stream Transaction) returns (Empty);

  rpc ProcessProposalFabricStream (stream ProposalRequest) returns (Empty);

  rpc ProcessProposalFabricCRDTStream (stream ProposalRequest) returns (Empty);

  rpc SubscribeProposalResponse (ProposalResponseEventSubscription) returns (stream ProposalResponse);
  rpc SubscribeTransactionResponse (TransactionResponseEventSubscription) returns (stream TransactionResponse);
  rpc SubscribeNodeTransactions (TransactionResponseEventSubscription) returns (stream NodeTransactionResponse);

  rpc SubscribeBlocksSyncHotStuff (BlockEventSubscription) returns (stream Block);

  rpc AddClientPublicKey (TransactionResponseEventSubscription) returns (Empty);

  rpc GetTransactionProfilingResult (Empty) returns (stream LatencyBreakDown);
  rpc GetCPUMemoryProfilingResult (Empty) returns (stream MemoryCPUProfile);
}
