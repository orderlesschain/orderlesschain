// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.21.12
// source: benchmark.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExperimentResult_ExperimentStatus int32

const (
	ExperimentResult_RUNNING ExperimentResult_ExperimentStatus = 0
	ExperimentResult_FAILED  ExperimentResult_ExperimentStatus = 1
	ExperimentResult_DONE    ExperimentResult_ExperimentStatus = 2
)

// Enum value maps for ExperimentResult_ExperimentStatus.
var (
	ExperimentResult_ExperimentStatus_name = map[int32]string{
		0: "RUNNING",
		1: "FAILED",
		2: "DONE",
	}
	ExperimentResult_ExperimentStatus_value = map[string]int32{
		"RUNNING": 0,
		"FAILED":  1,
		"DONE":    2,
	}
)

func (x ExperimentResult_ExperimentStatus) Enum() *ExperimentResult_ExperimentStatus {
	p := new(ExperimentResult_ExperimentStatus)
	*p = x
	return p
}

func (x ExperimentResult_ExperimentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExperimentResult_ExperimentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_benchmark_proto_enumTypes[0].Descriptor()
}

func (ExperimentResult_ExperimentStatus) Type() protoreflect.EnumType {
	return &file_benchmark_proto_enumTypes[0]
}

func (x ExperimentResult_ExperimentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExperimentResult_ExperimentStatus.Descriptor instead.
func (ExperimentResult_ExperimentStatus) EnumDescriptor() ([]byte, []int) {
	return file_benchmark_proto_rawDescGZIP(), []int{2, 0}
}

type ExperimentBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExperimentId string `protobuf:"bytes,1,opt,name=experiment_id,json=experimentId,proto3" json:"experiment_id,omitempty"`
}

func (x *ExperimentBase) Reset() {
	*x = ExperimentBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benchmark_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExperimentBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExperimentBase) ProtoMessage() {}

func (x *ExperimentBase) ProtoReflect() protoreflect.Message {
	mi := &file_benchmark_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExperimentBase.ProtoReflect.Descriptor instead.
func (*ExperimentBase) Descriptor() ([]byte, []int) {
	return file_benchmark_proto_rawDescGZIP(), []int{0}
}

func (x *ExperimentBase) GetExperimentId() string {
	if x != nil {
		return x.ExperimentId
	}
	return ""
}

type BenchmarkConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base                          *ExperimentBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	TransactionPerSecond          int32           `protobuf:"varint,3,opt,name=transaction_per_second,json=transactionPerSecond,proto3" json:"transaction_per_second,omitempty"`
	TotalTransactions             int64           `protobuf:"varint,4,opt,name=total_transactions,json=totalTransactions,proto3" json:"total_transactions,omitempty"`
	ContractName                  string          `protobuf:"bytes,5,opt,name=contract_name,json=contractName,proto3" json:"contract_name,omitempty"`
	TargetSystem                  TargetSystem    `protobuf:"varint,6,opt,name=target_system,json=targetSystem,proto3,enum=protos.TargetSystem" json:"target_system,omitempty"`
	BenchmarkFunctionName         string          `protobuf:"bytes,7,opt,name=benchmark_function_name,json=benchmarkFunctionName,proto3" json:"benchmark_function_name,omitempty"`
	ReportImportance              bool            `protobuf:"varint,8,opt,name=report_importance,json=reportImportance,proto3" json:"report_importance,omitempty"`
	TransactionSendDurationSecond int64           `protobuf:"varint,9,opt,name=transaction_send_duration_second,json=transactionSendDurationSecond,proto3" json:"transaction_send_duration_second,omitempty"`
	NumberOfKeys                  int64           `protobuf:"varint,10,opt,name=number_of_keys,json=numberOfKeys,proto3" json:"number_of_keys,omitempty"`
	EndorsementPolicyOrgs         int32           `protobuf:"varint,11,opt,name=endorsement_policy_orgs,json=endorsementPolicyOrgs,proto3" json:"endorsement_policy_orgs,omitempty"`
	CrdtObjectCount               string          `protobuf:"bytes,12,opt,name=crdt_object_count,json=crdtObjectCount,proto3" json:"crdt_object_count,omitempty"`
	CrdtOperationPerObjectCount   string          `protobuf:"bytes,13,opt,name=crdt_operation_per_object_count,json=crdtOperationPerObjectCount,proto3" json:"crdt_operation_per_object_count,omitempty"`
	CrdtObjectType                string          `protobuf:"bytes,14,opt,name=crdt_object_type,json=crdtObjectType,proto3" json:"crdt_object_type,omitempty"`
	NumberOfKeysSecond            int64           `protobuf:"varint,15,opt,name=number_of_keys_second,json=numberOfKeysSecond,proto3" json:"number_of_keys_second,omitempty"`
	NumberOfKeysThird             int64           `protobuf:"varint,16,opt,name=number_of_keys_third,json=numberOfKeysThird,proto3" json:"number_of_keys_third,omitempty"`
}

func (x *BenchmarkConfig) Reset() {
	*x = BenchmarkConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benchmark_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BenchmarkConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BenchmarkConfig) ProtoMessage() {}

func (x *BenchmarkConfig) ProtoReflect() protoreflect.Message {
	mi := &file_benchmark_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BenchmarkConfig.ProtoReflect.Descriptor instead.
func (*BenchmarkConfig) Descriptor() ([]byte, []int) {
	return file_benchmark_proto_rawDescGZIP(), []int{1}
}

func (x *BenchmarkConfig) GetBase() *ExperimentBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *BenchmarkConfig) GetTransactionPerSecond() int32 {
	if x != nil {
		return x.TransactionPerSecond
	}
	return 0
}

func (x *BenchmarkConfig) GetTotalTransactions() int64 {
	if x != nil {
		return x.TotalTransactions
	}
	return 0
}

func (x *BenchmarkConfig) GetContractName() string {
	if x != nil {
		return x.ContractName
	}
	return ""
}

func (x *BenchmarkConfig) GetTargetSystem() TargetSystem {
	if x != nil {
		return x.TargetSystem
	}
	return TargetSystem_NOTYPESYSTEM
}

func (x *BenchmarkConfig) GetBenchmarkFunctionName() string {
	if x != nil {
		return x.BenchmarkFunctionName
	}
	return ""
}

func (x *BenchmarkConfig) GetReportImportance() bool {
	if x != nil {
		return x.ReportImportance
	}
	return false
}

func (x *BenchmarkConfig) GetTransactionSendDurationSecond() int64 {
	if x != nil {
		return x.TransactionSendDurationSecond
	}
	return 0
}

func (x *BenchmarkConfig) GetNumberOfKeys() int64 {
	if x != nil {
		return x.NumberOfKeys
	}
	return 0
}

func (x *BenchmarkConfig) GetEndorsementPolicyOrgs() int32 {
	if x != nil {
		return x.EndorsementPolicyOrgs
	}
	return 0
}

func (x *BenchmarkConfig) GetCrdtObjectCount() string {
	if x != nil {
		return x.CrdtObjectCount
	}
	return ""
}

func (x *BenchmarkConfig) GetCrdtOperationPerObjectCount() string {
	if x != nil {
		return x.CrdtOperationPerObjectCount
	}
	return ""
}

func (x *BenchmarkConfig) GetCrdtObjectType() string {
	if x != nil {
		return x.CrdtObjectType
	}
	return ""
}

func (x *BenchmarkConfig) GetNumberOfKeysSecond() int64 {
	if x != nil {
		return x.NumberOfKeysSecond
	}
	return 0
}

func (x *BenchmarkConfig) GetNumberOfKeysThird() int64 {
	if x != nil {
		return x.NumberOfKeysThird
	}
	return 0
}

type ExperimentResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExperimentStatus ExperimentResult_ExperimentStatus `protobuf:"varint,1,opt,name=experiment_status,json=experimentStatus,proto3,enum=protos.ExperimentResult_ExperimentStatus" json:"experiment_status,omitempty"`
}

func (x *ExperimentResult) Reset() {
	*x = ExperimentResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benchmark_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExperimentResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExperimentResult) ProtoMessage() {}

func (x *ExperimentResult) ProtoReflect() protoreflect.Message {
	mi := &file_benchmark_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExperimentResult.ProtoReflect.Descriptor instead.
func (*ExperimentResult) Descriptor() ([]byte, []int) {
	return file_benchmark_proto_rawDescGZIP(), []int{2}
}

func (x *ExperimentResult) GetExperimentStatus() ExperimentResult_ExperimentStatus {
	if x != nil {
		return x.ExperimentStatus
	}
	return ExperimentResult_RUNNING
}

type FaultyNodes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId      []string `protobuf:"bytes,1,rep,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	StartAfterS int32    `protobuf:"varint,2,opt,name=start_after_s,json=startAfterS,proto3" json:"start_after_s,omitempty"`
}

func (x *FaultyNodes) Reset() {
	*x = FaultyNodes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benchmark_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FaultyNodes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FaultyNodes) ProtoMessage() {}

func (x *FaultyNodes) ProtoReflect() protoreflect.Message {
	mi := &file_benchmark_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FaultyNodes.ProtoReflect.Descriptor instead.
func (*FaultyNodes) Descriptor() ([]byte, []int) {
	return file_benchmark_proto_rawDescGZIP(), []int{3}
}

func (x *FaultyNodes) GetNodeId() []string {
	if x != nil {
		return x.NodeId
	}
	return nil
}

func (x *FaultyNodes) GetStartAfterS() int32 {
	if x != nil {
		return x.StartAfterS
	}
	return 0
}

var File_benchmark_proto protoreflect.FileDescriptor

var file_benchmark_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x1a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x35, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x8e,
	0x06, 0x0a, 0x0f, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x2a, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x34,
	0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x12, 0x36, 0x0a, 0x17, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b,
	0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x20, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x1d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x6e, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x66, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6f, 0x72,
	0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4f, 0x72, 0x67, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x63, 0x72, 0x64, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72, 0x64, 0x74,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x1f, 0x63,
	0x72, 0x64, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x63, 0x72, 0x64, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x72, 0x64, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x64,
	0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x4b, 0x65, 0x79, 0x73, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x2f,
	0x0a, 0x14, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x6b, 0x65, 0x79, 0x73,
	0x5f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4b, 0x65, 0x79, 0x73, 0x54, 0x68, 0x69, 0x72, 0x64, 0x22,
	0xa1, 0x01, 0x0a, 0x10, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x56, 0x0a, 0x11, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x35, 0x0a, 0x10,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x4e,
	0x45, 0x10, 0x02, 0x22, 0x4a, 0x0a, 0x0b, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x79, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x32,
	0xd4, 0x03, 0x0a, 0x10, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x10, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x42,
	0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x37, 0x0a, 0x11, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46,
	0x61, 0x75, 0x6c, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x0f, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x61, 0x73, 0x65, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x43,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x65, 0x1a, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x30, 0x01, 0x12, 0x39, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x1a,
	0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x49,
	0x0a, 0x19, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x6e, 0x64, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x11, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x1a, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x3b, 0x0a, 0x0e, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x2f, 0x3b, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_benchmark_proto_rawDescOnce sync.Once
	file_benchmark_proto_rawDescData = file_benchmark_proto_rawDesc
)

func file_benchmark_proto_rawDescGZIP() []byte {
	file_benchmark_proto_rawDescOnce.Do(func() {
		file_benchmark_proto_rawDescData = protoimpl.X.CompressGZIP(file_benchmark_proto_rawDescData)
	})
	return file_benchmark_proto_rawDescData
}

var file_benchmark_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_benchmark_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_benchmark_proto_goTypes = []interface{}{
	(ExperimentResult_ExperimentStatus)(0), // 0: protos.ExperimentResult.ExperimentStatus
	(*ExperimentBase)(nil),                 // 1: protos.ExperimentBase
	(*BenchmarkConfig)(nil),                // 2: protos.BenchmarkConfig
	(*ExperimentResult)(nil),               // 3: protos.ExperimentResult
	(*FaultyNodes)(nil),                    // 4: protos.FaultyNodes
	(TargetSystem)(0),                      // 5: protos.TargetSystem
	(*OperationMode)(nil),                  // 6: protos.OperationMode
	(*Profiling)(nil),                      // 7: protos.Profiling
	(*FailureCommandMode)(nil),             // 8: protos.FailureCommandMode
	(*Empty)(nil),                          // 9: protos.Empty
	(*ReportFile)(nil),                     // 10: protos.ReportFile
	(*ProfilingResult)(nil),                // 11: protos.ProfilingResult
}
var file_benchmark_proto_depIdxs = []int32{
	1,  // 0: protos.BenchmarkConfig.base:type_name -> protos.ExperimentBase
	5,  // 1: protos.BenchmarkConfig.target_system:type_name -> protos.TargetSystem
	0,  // 2: protos.ExperimentResult.experiment_status:type_name -> protos.ExperimentResult.ExperimentStatus
	2,  // 3: protos.BenchmarkService.ExecuteBenchmark:input_type -> protos.BenchmarkConfig
	4,  // 4: protos.BenchmarkService.FaultyNodesNotify:input_type -> protos.FaultyNodes
	1,  // 5: protos.BenchmarkService.ExecutionStatus:input_type -> protos.ExperimentBase
	1,  // 6: protos.BenchmarkService.GetExperimentResult:input_type -> protos.ExperimentBase
	6,  // 7: protos.BenchmarkService.ChangeModeRestart:input_type -> protos.OperationMode
	7,  // 8: protos.BenchmarkService.StopAndGetProfilingResult:input_type -> protos.Profiling
	8,  // 9: protos.BenchmarkService.FailureCommand:input_type -> protos.FailureCommandMode
	9,  // 10: protos.BenchmarkService.ExecuteBenchmark:output_type -> protos.Empty
	9,  // 11: protos.BenchmarkService.FaultyNodesNotify:output_type -> protos.Empty
	3,  // 12: protos.BenchmarkService.ExecutionStatus:output_type -> protos.ExperimentResult
	10, // 13: protos.BenchmarkService.GetExperimentResult:output_type -> protos.ReportFile
	9,  // 14: protos.BenchmarkService.ChangeModeRestart:output_type -> protos.Empty
	11, // 15: protos.BenchmarkService.StopAndGetProfilingResult:output_type -> protos.ProfilingResult
	9,  // 16: protos.BenchmarkService.FailureCommand:output_type -> protos.Empty
	10, // [10:17] is the sub-list for method output_type
	3,  // [3:10] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_benchmark_proto_init() }
func file_benchmark_proto_init() {
	if File_benchmark_proto != nil {
		return
	}
	file_shared_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_benchmark_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExperimentBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_benchmark_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BenchmarkConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_benchmark_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExperimentResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_benchmark_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FaultyNodes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_benchmark_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_benchmark_proto_goTypes,
		DependencyIndexes: file_benchmark_proto_depIdxs,
		EnumInfos:         file_benchmark_proto_enumTypes,
		MessageInfos:      file_benchmark_proto_msgTypes,
	}.Build()
	File_benchmark_proto = out.File
	file_benchmark_proto_rawDesc = nil
	file_benchmark_proto_goTypes = nil
	file_benchmark_proto_depIdxs = nil
}
